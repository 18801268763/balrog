#!/usr/bin/env node

var path = require('path')
var genSiteDir = require('../lib/generate-site-dir')
var fs = require('fs')
var gaze = require('gaze');

var join = path.join.bind(path)
var currentDir = getDirectory()

if (currentDir.match('balrog')) return console.log("NOT HERE!")

var templateDir = join(currentDir, 'templates')
var partialsDir = join(currentDir, 'partials')
var inputDir = join(currentDir, 'content')
var outputDir = join(currentDir, 'site')
var optsFile = join(currentDir, 'config.JSON')

fs.readFile(optsFile, function (err, data) {
  if (err) console.log(err)
  var opts = resolvePaths(data)

  genSiteDir(opts, function (err, files) {
    if (err)
      throw err

    console.log('Site built')
    if (process.argv[2] === "--serve") {
      var serve = require('../lib/test-server.js')
    }
    // TODO Parse flags better
    if (process.argv[3] === "-w") {
      console.log("watch", inputDir)
      gaze(inputDir + '/**/*', function(err, watcher) {
        console.log("Watching..")
        this.on('all', function(event, filepath) {
          genSiteDir(opts, function (err, files) {
            if (err)
              throw err
            console.log("Regenerated site...", new Date())
          })
        })
      })
    }
    if (process.argv[2] === "" && process.argv[2] != "--serve" ) {
      console.log("Trying to serve up your site locally? `balrog --serve` ")
    }
  })
})

function getDirectory() {
  var dirArg = process.cwd()
  return path.resolve(dirArg)
}

function resolvePaths(data) {
  var opts = JSON.parse(data)
  var needResolve = ['source', 'output', 'templateDir']

  needResolve.forEach(function (dir) {
    var thePath = opts[dir].toString()
    opts[dir] = path.resolve(thePath)
  })
  return opts
}
